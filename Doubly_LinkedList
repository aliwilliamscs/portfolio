/* Author: Alexandria Williams
 * File:     doubly.c
 *
 * Purpose:  Implement a sorted doubly linked list with insert,
 *           print, member, delete, free_list, allocate_node, and free_node.
 * 
 * Input:    Single character lower case letters to indicate operators, 
 *           followed by arguments needed by operators.
 * Output:   Results of operations.
 *
 * Compile:  gcc -g -Wall -o doubly doubly.c
 * Run:      ./doubly
 *
 */
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct list_node_s {
   char*    data;
   struct list_node_s* next_p;
   struct list_node_s* prev_p;
}; 

struct list_s{
   struct list_node_s* head_p;
   struct list_node_s* tail_p;
};


int  Member(struct list_s* list, char* val);
void Free_node(struct list_node_s* node_p);
void Insert(struct list_s* list, char* val);
void Delete(struct list_s* list, char* val);
void Print(struct list_s* list);
void Free_list(struct list_s* list); 
struct list_node_s* Allocate_node(int size);
char Get_command(void);
char*  Get_value(char* val);


/*-----------------------------------------------------------------*/
int main(void) {
   char val[100];
   char command;
   char* value;
   struct list_s list;

   list.head_p = NULL;
   list.tail_p = NULL;
 

      /* start with empty list */

   command = Get_command();
   while (command != 'q' && command != 'Q') {
      switch (command) {
         case 'i': 
         case 'I': 
            value = Get_value(val);
            Insert(&list, value);
            break;
         case 'p':
         case 'P':
            Print(&list);
            break;
         case 'm': 
         case 'M':
            value = Get_value(val);
            if (Member(&list, value))
               printf("%s is in the list\n", value);
            else
               printf("%s is not in the list\n", value);
            break;
         case 'd':
         case 'D':
            value = Get_value(val);
            Delete(&list, value);
            break;
         case 'f':
         case 'F':
            Free_list(&list);
            break;
         default:
            printf("There is no %c command\n", command);
            printf("Please try again\n");
      }
      command = Get_command();
   }

   Free_list(&list);

   return 0;
}  /* main */


/*-----------------------------------------------------------------
 * Function:    Member
 * Purpose:     search list for val
 * Input args:  list_s* list
 *              val:  value to search for
 * Return val:  1 if val is in list, 0 otherwise
 */
int Member(struct list_s* list, char* val) {
   struct list_node_s* curr_p = list->head_p;

   while (curr_p != NULL) {
      if (strcmp(curr_p->data, val) == 0)
         return 1;
      else if(strcmp(curr_p->data, val) > 0)
         return 0;   
      curr_p = curr_p->next_p;
   }
   return 0;
}  /* Member */

/*-----------------------------------------------------------------
 * Function:      Allocate_node
 * Purpose:       Allocates storage for a new node
 */

struct list_node_s* Allocate_node(int size){
  struct list_node_s* temp_p;

   temp_p = malloc(sizeof(struct list_node_s));
   temp_p->data = malloc((size + 1)*sizeof(char));

   return temp_p;
} /* Allocate_node */

/*-----------------------------------------------------------------
 * Function:      Free_node
 * Purpose:       Frees the storage for the string, and then frees the
                  storage for the node
 */
void Free_node(struct list_node_s* node_p){
   free(node_p->data);
   free(node_p);
} /* Free_node */

/*-----------------------------------------------------------------
 * Function:   Delete
 * Purpose:    Delete the first occurrence of val from list
 * Input args: list_s*
 *             val:    value to be deleted
 * Return val: Possibly updated pointer to head of list
 */
void Delete(struct list_s* list, char* val) {
   struct list_node_s* curr_p = list->head_p;
     /* Points to predecessor of curr_p or
                                        * NULL when curr_p is first node */

   /* Find node containing val and predecessor of this node */
   while (curr_p->next_p != NULL){
      if (strcmp(curr_p->data, val) >= 0) 
         break;
      else { // curr_p->data != val 
         curr_p = curr_p->next_p;
      }
   }
   if (strcmp(curr_p->data, val) != 0) 
      printf("%s is not in the list\n", val);
   else if (curr_p->prev_p == NULL) {
      list->head_p = curr_p->next_p;
      if(list->head_p != NULL)
         list->head_p -> prev_p = NULL;
      else
         list->tail_p = NULL;

      Free_node(curr_p);
   } else {
      if(curr_p->next_p == NULL){
         curr_p->prev_p->next_p = NULL;
         list->tail_p = curr_p;
      }

      else{  
         curr_p->prev_p->next_p = curr_p->next_p;    
         curr_p->next_p->prev_p = curr_p->prev_p;
      }

      Free_node(curr_p);
   }

   
}  /* Delete */


/*-----------------------------------------------------------------
 * Function:   Insert
 * Purpose:    Insert val at head of list
 * Input args: list_s* list
 *             val:  new value to be inserted
 * Return val: Pointer to head of list
 */
void Insert(struct list_s* list, char* val) {
   struct list_node_s* temp_p;
   struct list_node_s* curr_p = list->head_p;

 if(list->head_p == NULL){
    
      temp_p = Allocate_node(strlen(val));
      strncpy(temp_p->data,val,strlen(val)+1);
      
      list->head_p = temp_p;
      list->head_p->prev_p = NULL;
      list->head_p->next_p = NULL;
     
   }
   else{
      
      while (curr_p->next_p != NULL) {
         if (strcmp(curr_p->next_p->data, val) >= 0) {
            break;
          }             
         curr_p = curr_p->next_p;
      }

      if (strcmp(curr_p->data,val) > 0){
         temp_p = Allocate_node(strlen(val));
         strncpy(temp_p->data,val,strlen(val)+1);
       
         temp_p->prev_p = curr_p->prev_p;
         temp_p->next_p = curr_p;

         if(curr_p->prev_p == NULL)
            list->head_p = temp_p;
         else{
            curr_p->prev_p->next_p = temp_p;  
         }

         curr_p->prev_p = temp_p;
      }
      else if(strcmp(curr_p->data,val) < 0){

         temp_p = Allocate_node(strlen(val));
         strncpy(temp_p->data,val,strlen(val)+1);
        
         temp_p->next_p = curr_p->next_p;
         temp_p->prev_p = curr_p;

         if(curr_p->next_p == NULL)
            list->tail_p = temp_p;
         else{
            curr_p->next_p->prev_p = temp_p;  
         }

         curr_p->next_p = temp_p;
      }

   }
   
}   /* Insert */

/*-----------------------------------------------------------------
 * Function:   Print
 * Purpose:    Print list on a single line of stdout
 * Input arg:  head_p
 */
void Print(struct list_s* list) {
   struct list_node_s* curr_p = list->head_p;

   printf("list = ");
   while (curr_p != NULL) {
      printf("%s ", curr_p->data);
      curr_p = curr_p->next_p;
   }  
   printf("\n");
}  /* Print */


/*-----------------------------------------------------------------
 * Function:    Free_list
 * Purpose:     free each node in the list
 * Input arg:   head_p:  pointer to head of list
 * Return val:  NULL pointer
 * Note:        head_p is set to NULL on completion, indicating
 *              list is empty.
 */
void Free_list(struct list_s* list) {
   struct list_node_s* curr_p;
   struct list_node_s* temp_p;

   curr_p = list->head_p;
   while (curr_p != NULL) {
      temp_p = curr_p;
      curr_p = curr_p->next_p;
      Free_node(temp_p);     
   }

   list->head_p = NULL;
   
}  /* Free_list */

/*-----------------------------------------------------------------
 * Function:      Get_command
 * Purpose:       Get a single character command from stdin
 * Return value:  the first non-whitespace character from stdin
 */
char Get_command(void) {
   char c;

   printf("Please enter a command (i, p, m, d, f, q):  ");
   /* Put the space before the %c so scanf will skip white space */
   scanf(" %c", &c);
   return c;
}  /* Get_command */

/*-----------------------------------------------------------------
 * Function:   Get_value
 * Purpose:    Get an int from stdin
 * Return value:  the next int in stdin
 * Note:       Behavior unpredictable if an int isn't entered
 */
char* Get_value(char* val) {
   
   printf("Please enter a value:  ");
   scanf("%s", val);
   return val;
}  /* Get_value */
